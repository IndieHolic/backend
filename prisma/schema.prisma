generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id                Int                 @id @default(autoincrement())
  name              String
  email             String              @unique
  password          String
  isAdmin           Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  BoardComments     BoardComments[]
  BoardLikes        BoardLikes[]
  Boards            Boards[]
  GamePurchases     GamePurchases[]
  GameReviewReplies GameReviewReplies[]
  GameReviews       GameReviews[]
  Studios           Studios[]
  UserStudioLinks   UserStudioLinks[]
  Files             Files[]
}

model EmailVerifications {
  id         Int      @id @default(autoincrement())
  email      String
  token      String   @unique
  isVerified Boolean  @default(false)
  expiredAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Studios {
  id                Int                 @id @default(autoincrement())
  name              String              @unique
  managerId         Int
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  StudioInvitations StudioInvitations[]
  manager           Users               @relation(fields: [managerId], references: [id])
  UserStudioLinks   UserStudioLinks[]
  games             games[]
}

model StudioInvitations {
  id        Int      @id @default(autoincrement())
  studioId  Int
  email     String
  expiredAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studios  @relation(fields: [studioId], references: [id], onDelete: Cascade)
}

model UserStudioLinks {
  id        Int      @id @default(autoincrement())
  userId    Int
  studioId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  studio    Studios  @relation(fields: [studioId], references: [id], onDelete: Cascade)
  user      Users    @relation(fields: [userId], references: [id])

  @@unique([userId, studioId])
}

model GameVersions {
  id        Int      @id @default(autoincrement())
  version   String
  gameId    Int
  fileId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Games     games    @relation(fields: [gameId], references: [id], onDelete: Cascade)
  Files     Files    @relation(fields: [fileId], references: [id])
}

model GameSales {
  id        Int      @id @default(autoincrement())
  gameId    Int
  percent   Int
  startAt   DateTime
  endAt     DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  game      games    @relation(fields: [gameId], references: [id])
}

model GameReviews {
  id                Int                 @id @default(autoincrement())
  gameId            Int
  userId            Int
  content           String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  GameReviewReplies GameReviewReplies[]
  game              games               @relation(fields: [gameId], references: [id])
  user              Users               @relation(fields: [userId], references: [id])
}

model GameReviewReplies {
  id        Int         @id @default(autoincrement())
  reviewId  Int
  userId    Int
  content   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  review    GameReviews @relation(fields: [reviewId], references: [id])
  user      Users       @relation(fields: [userId], references: [id])
}

model GamePurchases {
  id            Int      @id @default(autoincrement())
  userId        Int
  gameId        Int
  purchasePrice Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  game          games    @relation(fields: [gameId], references: [id])
  user          Users    @relation(fields: [userId], references: [id])
}

model GameCategories {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  games     games[]  @relation("GameCategoriesToGames")
}

model GameCollections {
  id                  Int                   @id @default(autoincrement())
  title               String
  description         String
  startAt             DateTime
  endAt               DateTime
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  GameCollectionLinks GameCollectionLinks[]
}

model GameCollectionLinks {
  id           Int             @id @default(autoincrement())
  collectionId Int
  gameId       Int
  createdAt    DateTime        @default(now())
  updatedAt    DateTime        @updatedAt
  collection   GameCollections @relation(fields: [collectionId], references: [id])
  game         games           @relation(fields: [gameId], references: [id])
}

model MainBanners {
  id              Int      @id @default(autoincrement())
  startAt         DateTime
  endAt           DateTime
  link            String
  title           String?
  iconImage       String?
  backgroundImage String?
  description     String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model BoardComments {
  id        Int       @id @default(autoincrement())
  writerId  Int
  content   String
  boardId   Int
  createdAt DateTime  @default(now())
  updatedAt DateTime
  deletedAt DateTime?
  Boards    Boards    @relation(fields: [boardId], references: [id])
  Users     Users     @relation(fields: [writerId], references: [id])
}

model BoardLikes {
  id        Int        @id @default(autoincrement())
  userId    Int
  status    LikeStatus
  boardId   Int
  createdAt DateTime   @default(now())
  updatedAt DateTime
  Boards    Boards     @relation(fields: [boardId], references: [id])
  Users     Users      @relation(fields: [userId], references: [id])
}

model BoardViewHistory {
  id      Int      @id @default(autoincrement())
  boardId Int?
  viewAt  DateTime @default(now())
  ip      String
  Boards  Boards?  @relation(fields: [boardId], references: [id])
}

model Boards {
  id               Int                @id @default(autoincrement())
  writerId         Int
  title            String
  content          String
  thumbnailUrl     String
  likeCount        Int                @default(0)
  dislikeCount     Int                @default(0)
  boardType        BoardType
  parentId         Int?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime
  deletedAt        DateTime?
  tags             String             @default("")
  viewCount        Int                @default(0)
  BoardComments    BoardComments[]
  BoardLikes       BoardLikes[]
  BoardViewHistory BoardViewHistory[]
  Boards           Boards?            @relation("BoardsToBoards", fields: [parentId], references: [id])
  other_Boards     Boards[]           @relation("BoardsToBoards")
  Users            Users              @relation(fields: [writerId], references: [id])
}

model games {
  id                  Int                   @id @default(autoincrement())
  title               String
  studioId            Int
  basePrice           Int
  createdAt           DateTime              @default(now())
  updatedAt           DateTime
  GameCollectionLinks GameCollectionLinks[]
  GamePurchases       GamePurchases[]
  GameReviews         GameReviews[]
  GameSales           GameSales[]
  version             GameVersions[]
  Studios             Studios               @relation(fields: [studioId], references: [id], onDelete: Cascade)
  GameCategories      GameCategories[]      @relation("GameCategoriesToGames")
}

enum BoardType {
  Info
  free
  QnA
}

enum LikeStatus {
  Like
  Dislike
  None
}

enum FileType {
  GAME
  ASSET
  ETC
}

model Files {
  id           Int            @id @default(autoincrement())
  key          String         @unique
  type         FileType
  size         Int
  ownerId      Int?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  GameVersions GameVersions[]
  Users        Users?         @relation(fields: [ownerId], references: [id])
}
